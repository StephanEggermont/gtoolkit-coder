Class {
	#name : #GtCoderActionsElement,
	#superclass : #BlElement,
	#instVars : [
		'mainToolbar',
		'contextToolbar',
		'separator',
		'coder'
	],
	#category : #'GToolkit-Coder-UI'
}

{ #category : #private }
GtCoderActionsElement >> addContextToolbarActions [
	contextToolbar addItems: (coder contextActions collect: [ :aGtCoderAction | self newButtonForAction: aGtCoderAction ]).
	separator
		visibility:
			(contextToolbar hasItems
				ifTrue: [ BlVisibility visible ]
				ifFalse: [ BlVisibility gone ])
]

{ #category : #private }
GtCoderActionsElement >> addMainToolbarActions [
	mainToolbar addItems: (coder mainActions collect: [ :aGtCoderAction | 
		self flag: 'Temporary hack. Coder should to Phlow actions'.
		aGtCoderAction class = GtCoderDropDownAction 
			ifTrue: [ self newDropButtonForAction: aGtCoderAction ] 
			ifFalse: [ self newButtonForAction: aGtCoderAction  ] ])
]

{ #category : #accessing }
GtCoderActionsElement >> coder [
	^ coder
]

{ #category : #accessing }
GtCoderActionsElement >> coder: aCoder [
	coder := aCoder.
	coder announcer weak
		when: GtCoderMainActionsChanged send: #updateMainToolbar to: self;
		when: GtCoderContextActionsChanged
			send: #updateContextToolbar
			to: self.
	self addMainToolbarActions.
	self addContextToolbarActions
]

{ #category : #initialization }
GtCoderActionsElement >> initialize [
	super initialize.
	
	self layout: BlLinearLayout horizontal.
	self padding: (BlInsets empty).
	self constraintsDo: [ :c |
		c horizontal matchParent.
		c vertical fitContent ].

	mainToolbar := self newToolbar.
	
	separator := BlElement new
		background: (Color gray alpha: 0.2);
		margin: (BlInsets top: 5 left: 5 bottom: 5 right: 5);
		constraintsDo: [ :c |
			c horizontal exact: 1.
			c vertical matchParent ].

	contextToolbar := self newToolbar.

	self addChildren: { mainToolbar . separator . contextToolbar }
]

{ #category : #'instance creation' }
GtCoderActionsElement >> newButtonForAction: aGtCoderAction [
	<return: #BrButton>
	
	^ BrButton new
		beSmall;
		look: BrGlamorousButtonWithIconLook;
		label: aGtCoderAction title;
		icon: aGtCoderAction icon asElement;
		action: aGtCoderAction
]

{ #category : #'instance creation' }
GtCoderActionsElement >> newDropButtonForAction: aGtCoderAction [
	<return: #BrDropdown>
	| dropDown |
	dropDown := BrDropdown new.
	dropDown
		layout: BlLinearLayout horizontal;
		constraintsDo: [ :c | 
			c horizontal fitContent.
			c vertical fitContent ];
		look: BrGlamorousDropdownLook new;
		padding: BlInsets empty;
		margin: BlInsets empty;
		toggle: [ | aButton |
			aButton := BrButton new.
			aGtCoderAction title
				ifNotNil: [ aButton label: aGtCoderAction title asRopedText ].
			aGtCoderAction icon
				ifNotNil: [ aButton icon: aGtCoderAction icon asElement ].
			aButton
				beSmall;
				look: BrGlamorousButtonWithIconLook;
				padding: BlInsets empty;
				margin: BlInsets empty ];
		popup: [ | classCompleter containerElement titleElement |
			containerElement := BlElement new
				layout: BlLinearLayout vertical;
				constraintsDo: [ :c | 
					c horizontal exact: 200.
					c vertical matchParent ].
			titleElement := BrEditorElement new
				look: BrGlamorousInputFieldSpacingLook;
				editor: (BrTextEditor new text: '' asRopedText);
				requestFocus;
				constraintsDo: [ :c | 
					c
						margin:
							(BlInsets
								top: 1
								left: 0
								bottom: 0
								right: 0).
					c horizontal matchParent.
					c vertical fitContent ].
			classCompleter := GtCompletionController
				on: titleElement
				strategy: GtCoderClassWithPackageCompletionStrategy new.
			classCompleter install.
			classCompleter announcer
				when: GtCompleterCompletionAccepted
				do: [ :event | 
					aGtCoderAction action value: titleElement editor text asString asClass.
					dropDown toggle ].
			containerElement addChild: titleElement.
			containerElement ].
	^ dropDown

	"^ ((GtPhlowDropdownAction new
		label: aGtCoderAction title;
		icon: aGtCoderAction icon asElement;
		popup: [
			 ])
				asElement: [ :anActionElement | 
					anActionElement ] withHostElement: self)"
]

{ #category : #'instance creation' }
GtCoderActionsElement >> newToolbar [
	<return: #BrToolbar>

	^ BrToolbar new
		look: BrToolbarLook new;
		layout: (BlGridLayout horizontal rowCount: 1; cellSpacing: 3);
		constraintsDo: [ :c |
			c horizontal fitContent.
			c vertical fitContent ]
]

{ #category : #private }
GtCoderActionsElement >> removeContextToolbarActions [
	contextToolbar numberOfItems timesRepeat: [ contextToolbar removeItemAt: 1 ]
]

{ #category : #private }
GtCoderActionsElement >> removeMainToolbarActions [
	mainToolbar numberOfItems timesRepeat: [ mainToolbar removeItemAt: 1 ]
]

{ #category : #private }
GtCoderActionsElement >> updateContextToolbar [
	self removeContextToolbarActions.
	self addContextToolbarActions
]

{ #category : #private }
GtCoderActionsElement >> updateMainToolbar [
	self removeMainToolbarActions.
	self addMainToolbarActions
]
